{
	"info": {
		"_postman_id": "4ac4ef4f-8cec-4601-b0d6-ddb6cfe4915b",
		"name": "Blog API - Mission Four",
		"description": "Complete collection for testing the Blog API with user authentication, post management, and comment features. Server runs on http://localhost:8080",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User created successfully\");",
									"    pm.expect(jsonData.user).to.have.property(\"username\");",
									"    pm.expect(jsonData.user).to.have.property(\"email\");",
									"    pm.expect(jsonData.user.password).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User 2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"jane_smith\",\n    \"email\": \"jane@example.com\",\n    \"password\": \"password456\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData).to.have.property(\"user\");",
									"    pm.expect(jsonData.user.username).to.eql(\"john_doe\");",
									"    pm.expect(jsonData.user.password).to.be.empty;",
									"});",
									"",
									"// Store token for future requests",
									"if (pm.response.json().token) {",
									"    pm.collectionVariables.set(\"user1_token\", pm.response.json().token);",
									"    pm.collectionVariables.set(\"user1_id\", pm.response.json().user.id);",
									"    pm.collectionVariables.set(\"user1_username\", pm.response.json().user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Store token for future requests",
									"if (pm.response.json().token) {",
									"    pm.collectionVariables.set(\"user2_token\", pm.response.json().token);",
									"    pm.collectionVariables.set(\"user2_id\", pm.response.json().user.id);",
									"    pm.collectionVariables.set(\"user2_username\", pm.response.json().user.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"jane_smith\",\n    \"password\": \"password456\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "User registration and login endpoints"
		},
		{
			"name": "Posts Management",
			"item": [
				{
					"name": "Create Post (User 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"post created successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Getting Started with Go Programming\",\n    \"content\": \"Go is a powerful programming language developed by Google. This post covers the basics of Go programming including variables, functions, and control structures.\",\n    \"UserID\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/post/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post (User 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"post created successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user2_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Understanding GORM in Go\",\n    \"content\": \"GORM is a fantastic ORM library for Go that makes database operations much easier. This post explores GORM features and best practices.\",\n    \"UserID\": 2\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/post/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unauthorized Post\",\n    \"content\": \"This should fail without authorization.\",\n    \"user_id\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/post/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 Posts List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Posts list returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"posts\");",
									"    pm.expect(jsonData.posts).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/post/list",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2 Posts List",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user2_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/post/list",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Detail (Post ID: 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post detail returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"post\");",
									"    pm.expect(jsonData.post).to.have.property(\"title\");",
									"    pm.expect(jsonData.post).to.have.property(\"content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/post/detail?postID=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"detail"
							],
							"query": [
								{
									"key": "postID",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post (User 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"post updated successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"title\": \"Getting Started with Go Programming [UPDATED]\",\n    \"content\": \"Go is a powerful programming language developed by Google. This post covers the basics of Go programming including variables, functions, and control structures. [This content has been updated]\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/post/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post (User 2 deletes Post 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"post deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user2_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/post/delete?postID=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"post",
								"delete"
							],
							"query": [
								{
									"key": "postID",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Post CRUD operations with authentication"
		},
		{
			"name": "Comments Management",
			"item": [
				{
					"name": "Create Comment (User 1 on Post 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment inserted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"comment inserted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"postId\": 1,\n    \"content\": \"Great article! This really helped me understand Go basics.\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/comment/insert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment (User 2 on Post 1)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user2_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"post_id\": 1,\n    \"content\": \"Thanks for sharing! I particularly liked the examples you provided.\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/comment/insert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"post_id\": 1,\n    \"content\": \"This should fail without authorization.\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/comment/insert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"insert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments for Post 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comments array returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/comment/get?postID=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"get"
							],
							"query": [
								{
									"key": "postID",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments for Non-existent Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty comments array returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/comment/get?postID=999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"get"
							],
							"query": [
								{
									"key": "postID",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments Without postID Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"    pm.expect(jsonData.error).to.eql(\"postID is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/comment/get",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"comment",
								"get"
							]
						}
					},
					"response": []
				}
			],
			"description": "Comment operations with authentication"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user1_token",
			"value": ""
		},
		{
			"key": "user1_id",
			"value": ""
		},
		{
			"key": "user1_username",
			"value": ""
		},
		{
			"key": "user2_token",
			"value": ""
		},
		{
			"key": "user2_id",
			"value": ""
		},
		{
			"key": "user2_username",
			"value": ""
		}
	]
}